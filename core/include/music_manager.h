//////////////////////////////////////////////////////////////////////////////////////
//    akashi - a server for Attorney Online 2                                       //
//    Copyright (C) 2020  scatterflower                                             //
//                                                                                  //
//    This program is free software: you can redistribute it and/or modify          //
//    it under the terms of the GNU Affero General Public License as                //
//    published by the Free Software Foundation, either version 3 of the            //
//    License, or (at your option) any later version.                               //
//                                                                                  //
//    This program is distributed in the hope that it will be useful,               //
//    but WITHOUT ANY WARRANTY; without even the implied warranty of                //
//    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                 //
//    GNU Affero General Public License for more details.                           //
//                                                                                  //
//    You should have received a copy of the GNU Affero General Public License      //
//    along with this program.  If not, see <https://www.gnu.org/licenses/>.        //
//////////////////////////////////////////////////////////////////////////////////////
#ifndef MUSIC_MANAGER_H
#define MUSIC_MANAGER_H

#include <QObject>
#include <QMap>
#include <QHash>
#include <QPair>

#include <include/config_manager.h>

class MusicManager : public QObject
{
    Q_OBJECT
public:

    /**
     * @brief Constructor for the server-wide musiclist manager.
     *
     * @param Copy of the server musiclist generated by ConfigManager::musiclist();
     */
    MusicManager(QMap<QString, QPair<QString, float>> f_root_list);

    /**
     * @brief Destructor for the server-wide musiclist manager.
     */
    virtual ~MusicManager();

    /**
     * @brief Returns a musiclist with aliased names.
     *
     * @return See short description.
     */
    QStringList musiclist(int f_area_id);

    /**
     * @brief Returns only the root musiclist with aliased names.
     *
     */
    QStringList rootMusiclist();

    /**
     * @brief Adds a new area to the music_manager.
     *
     * @param f_area_id ID of the new area being added.
     *
     * @return Returns false if registering the area fails.
     */
    bool registerArea(int f_area_id);

    /**
     * @brief Validates the song candidate to be played. If validation fails, false is returned.
     * @param f_song_name The song to be played. Can be an http/https stream or a local file.
     * @param f_approved_cdns A list of approved remote content sources.
     * @return Wether or not the song can be played or added.
     */
    bool validateSong(QString f_song_name, QStringList f_approved_cdns);

    /**
     * @brief Attempts to add the new song to the custom musiclist.
     * @param f_song_name Friendly name shown in the clients musiclist.
     * @param f_real_name Real name/url of the file.
     * @param f_duration Playtime of the musicfile in seconds.
     * @param f_area_id Area id of the clients current area.
     *
     * @return Returns true on success, false on fail.
     */
    bool addCustomSong(QString f_song_name, QString f_real_name, float f_duration, int f_area_id);

    /**
     * @brief Attempts to add the new category to the custom musiclist.
     * @param f_category_name Category name candidate.
     *
     * @return Returns true on saccess, false on fail.
     */
    bool addCustomCategory(QString f_category_name, int f_area_id);

    /**
     * @brief Toggles wether the root list is included for this area.
     * This also delets the custom llist if it was enabled prior.
     * @return
     */
    bool toggleRootEnabled(int f_area_id);

public slots:

    /**
     * @brief Updates the root musiclist and CDN list.
     */
    void reloadRequest();

private:

    /**
     * @brief Contains all custom lists of all areas in the server.
     */
    QHash<int,QMap<QString,QPair<QString,float>>>* m_custom_lists;

    /**
     * @brief Server musiclist shared among all areas.
     */
    QMap<QString,QPair<QString,float>> m_root_list;

    /**
     * @brief Wether the global musiclist is prepend and validation when adding custom music.
     */
    QHash<int,bool> m_global_enabled;

    /**
     * @brief Contains all server approved content sources.
     */
    QStringList m_cdns;
};

#endif // MUSIC_MANAGER_H
